name: release image

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: "write"

on:
  workflow_run:
    workflows: ["Tag"]
    types:
      - "completed"

jobs:
  get-tag:
    name: "Get Tag From Package Version"
    runs-on: "ubuntu-latest"
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get tag"
        id: "pkg-version"
        shell: "bash"
        run: |
          echo PKG_VERSION=$( cat Cargo.toml | grep -m 1 version | awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' ) >> $GITHUB_OUTPUT

  create-release:
    name: "Create release"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: "get-tag"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4

      - name: "Create release"
        uses: "taiki-e/create-gh-release-action@v1"
        with:
          # (optional) Path to changelog.
          # changelog: CHANGELOG.md
          branch: "main"
          ref: refs/tags/v${{ needs.get-tag.outputs.pkg-version }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    name: "Upload assets to Github releases"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "get-tag"
      - "create-release"
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ffmpeg-linking: static
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            ffmpeg-linking: static
          - build: windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            ffmpeg-linking: shared
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - id: "ffmpeg"
        name: Setup FFmpeg
        uses: federicocarboni/setup-ffmpeg@v3.1
        with:
          ffmpeg-version: release
          architecture: x64
          linking-type: ${{ matrix.ffmpeg-linking }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-${{ matrix.target }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: "Upload Binaries"
        uses: "taiki-e/upload-rust-binary-action@v1"
        with:
          bin: "phi"
          target: ${{ matrix.target }}
          archive: $bin-${{ matrix.target }}
          ref: refs/tags/v${{ needs.get-tag.outputs.pkg-version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          include: phi-prod.toml,${{ steps.ffmpeg.outputs.ffmpeg-path }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Copy file for docker build
        run: |
          cp target/${{ matrix.target }}/release/phi docker/
          cp phi-prod.toml docker/
          cp -r ${{ steps.ffmpeg.outputs.ffmpeg-path }} docker/
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v6
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          context: "./docker"
          file: "./docker/Dockerfile"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max